##ADDER##
design code

module adder1bit(A, B, Ci, S, Co);
input A, B, Ci;
output S, Co;
assign S = A^B^Ci;
assign Co = A&B | Ci&(A^B);
endmodule

module four_bit_adder(A, B, Ci, S, Co);
input [3:0] A, B; input Ci;
output [3:0] S; output Co;
wire [3:0] A, B, S; wire Ci, Co;
wire [2:0] C;
adder1bit add1(A[0], B[0], Ci, S[0], C[0]);
adder1bit add2(A[1], B[1], C[0], S[1], C[1]);
adder1bit add3(A[2], B[2], C[1], S[2], C[2]);
adder1bit add4(A[3], B[3], C[2], S[3], Co);
endmodule

simulation code

module adder4bit_tb();
reg clk, Ci; reg [3:0] A, B;
wire [3:0] S; wire Co;
four_bit_adder connect(A, B, Ci, S, Co);
initial begin
    clk=0; A[3]=0; A[2]=1; A[1]=0; A[0]=1;
    B[3]=0; B[2]=0; B[1]=0; B[0]=0; Ci=1; end
always clk = #10 ~clk;
always @(posedge clk) begin
    Ci <= ~Ci; B[0] <= #39.999 ~B[0];
    B[1] <= #79.999 ~B[1]; B[2] <= #159.999 ~B[2];
    B[3] <= #319.999 ~B[3]; end
endmodule

##SUBTRACTOR##

design code

module sub1bit(A, B, bi, d, bo);
input A, B, bi;
output d, bo;
assign d = A^(B^bi);
assign bo = B&bi | !A&(B^bi);
endmodule

module four_bit_subtractor(A, B, bi, d, bo);
input [3:0] A, B; input bi;
output [3:0] d; output bo;
wire [3:0] A, B, d; wire bi, bo;
wire [2:0] bout;
sub1bit sub1(A[0], B[0], bi, d[0], bout[0]);
sub1bit sub2(A[1], B[1], bout[0], d[1], bout[1]);
sub1bit sub3(A[2], B[2], bout[1], d[2], bout[2]);
sub1bit sub4(A[3], B[3], bout[2], d[3], bo);
endmodule

simulation code

module sub4bit_tb();
reg clk, bi ;reg [3:0] A, B;
wire [3:0] d; wire bo;
four_bit_subtractor connect(A, B, bi, d, bo);
initial begin
clk=0; B[0]=1; B[1]=0; B[2]=1; B[3]=0;
bi=1; A[3]=0; A[2]=0; A[1]=0; A[0]=0;
end
always clk = #10 ~clk;
always @(posedge clk) begin
bi <= ~bi;
A[0] <= #39.999 ~A[0];
A[1] <= #79.999 ~A[1];
A[2] <= #159.999 ~A[2];
A[3] <= #319.999 ~A[3];
end
endmodule


##BCD ADDER##

design code

module adder1bit(A, B, Ci, S, Co);
input A, B, Ci;
output S, Co;
assign S = A^B^Ci;
assign Co = A&B | Ci&(A^B);
endmodule

module four_bit_adder(A, B, Ci, S, Co);
input [3:0] A, B; input Ci;
output [3:0] S; output Co;
wire [3:0] A, B, S; wire Ci, Co;
wire [2:0] C;
adder1bit add1(A[0], B[0], Ci, S[0], C[0]);
adder1bit add2(A[1], B[1], C[0], S[1], C[1]);
adder1bit add3(A[2], B[2], C[1], S[2], C[2]);
adder1bit add4(A[3], B[3], C[2], S[3], Co);
endmodule

module BCD(A, B, S, C);
input [3:0] A, B;
output [3:0] S; output C;
wire [3:0] B2, A2; wire Cout;
four_bit_adder add1(A, B, 0, B2, Cout);
assign C = B2[3]&B2[1] | B2[3]&B2[2] | Cout;
assign A2 = 4'b0110 * C;
four_bit_adder add2(A2, B2, 0, S);
endmodule

simulation code

module BCD_tb();
reg clk; reg [3:0] A, B;
wire [3:0] S; wire C;
BCD connect(A, B, S, C);
initial begin
clk=0; A=4'd5;
B=4'd0;
end;
always clk = #10 ~clk;
always @(posedge clk) begin
B <= B+4'd1;
end
endmodule