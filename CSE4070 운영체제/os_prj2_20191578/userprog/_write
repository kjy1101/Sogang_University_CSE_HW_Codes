#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "lib/user/syscall.h"
#include "devices/shutdown.h"
#include "userprog/process.h"
#include "devices/input.h"
#include "threads/vaddr.h"
#include "threads/synch.h"
#include <string.h>
#include "filesys/filesys.h"
#include "filesys/file.h"

static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  //printf ("system call!\n");
	int system_call_number = *(uint32_t*)f->esp;
	uint32_t *arg1 = (uint32_t*)(f->esp+4);
	uint32_t *arg2 = (uint32_t*)(f->esp+8);
	uint32_t *arg3 = (uint32_t*)(f->esp+12);
	uint32_t *arg4 = (uint32_t*)(f->esp+16);
	int valid_flag = 0;

	valid_flag = check_address_validity(arg1);
	if(valid_flag == -1){
		exit(-1);
	}

	if(system_call_number == SYS_HALT){
		halt();
	}

	else if(system_call_number == SYS_EXIT){
		exit(*arg1);
	}

	else if(system_call_number == SYS_EXEC){
		f->eax = exec((const char*)*arg1);
	}

	else if(system_call_number == SYS_WAIT){
		f->eax = wait((pid_t)*arg1);
	}

	else if(system_call_number == SYS_READ){
		f->eax = read(*arg1, (void*)*arg2, *arg3);
	}

	else if(system_call_number == SYS_WRITE){
		f->eax = write(*arg1, (const void*)*arg2, *arg3);
	}

	else if(system_call_number == SYS_FIBONACCI){
		fibonacci(*arg1);
	}

	else if(system_call_number == SYS_MAX_OF_FOUR_INT){
		max_of_four_int(*arg1, *arg2, *arg3, *arg4);
	}

	else if(system_call_number == SYS_CREATE){
		f->eax = create((const char*)*arg1, *arg2);
	}

	else if(system_call_number == SYS_REMOVE){
		f->eax = remove((const char*)*arg1);
	}

	else if(system_call_number == SYS_OPEN){
		f->eax = open((const char*)*arg1);
	}

	else if(system_call_number == SYS_CLOSE){
		close(*arg1);
	}

	else if(system_call_number == SYS_FILESIZE){
		f->eax = filesize(*arg1);
	}

	else if(system_call_number == SYS_SEEK){
		seek(*arg1, *arg2);
	}

	else if(system_call_number == SYS_TELL){
		f->eax = tell(*arg1);
	}

	else{
		exit(-1);
	}
  //thread_exit ();
}

/* project 1 */
void halt(void){
	shutdown_power_off();
}

void exit(int status){
	struct thread *t = thread_current();
	t->exit_status = status;

	/*for(int i=3;i<128;i++){
		if(t->fd[i] != NULL){
			close(i);
		}
	}*/

	printf("%s: exit(%d)\n", t->name, t->exit_status);
	thread_exit();
}

pid_t exec(const char *cmd_line){
	int pid = process_execute(cmd_line);
	return pid;
}

int wait(pid_t pid){
	return process_wait(pid);
}

/*int read(int fd, void *buffer, unsigned size){
	if(fd == 0){
		for(unsigned count=size;count>0;count--){
			*((char*)buffer++) = input_getc();
		}
		return size;
	}
	else return -1;
}

int write(int fd, const void *buffer, unsigned size){
	if(fd == 1){
		putbuf(buffer, size);
		return size;
	}
	else return -1;
}*/

int check_address_validity(const void *vaddr){
	if(is_user_vaddr(vaddr)!=true)
		return -1;
	return 0;
}

int fibonacci(int n){
	int temp=0;
	int temp1=0, temp2=1;
	for(int i=1;i<=n;++i){
		temp = temp1 + temp2;
		temp1 = temp2;
		temp2 = temp;
	}
	printf("%d ", temp1);
	return 0;
}

int max_of_four_int(int n1, int n2, int n3, int n4){
	int max = n1;
	if(max < n2) max = n2;
	if(max < n3) max = n3;
	if(max < n4) max = n4;
	printf("%d\n", max);
	return 0;
}

/* project 2 */
bool create(const char *file, unsigned initial_size){
	if (!strcmp(file, "\0"))
		return false;
	return filesys_create(file, initial_size);
}

bool remove(const char *file){
	return filesys_remove(file);
}

int open(const char *file){
	if (!strcmp(file, "\0"))
		return -1;
	struct file *f = filesys_open(file);
	struct thread *t = thread_current();
	int fd_index=0;
	if(f != NULL){
		/* open success */
		for(int i=3;i<128;i++){
			if(t->fd[i] == NULL){
				fd_index = i;
				break;
			}
		}
		t->fd[fd_index] = f;
		return fd_index;
	}
	else{
		/* open fail */
		return -1;
	}
	return -1;
}

void close(int fd){
	struct thread *t = thread_current();
	file_close(t->fd[fd]);
}

int filesize(int fd){
	struct thread *t = thread_current();
	return file_length(t->fd[fd]);
}

int read(int fd, void *buffer, unsigned size){
	if(fd == 0){
		for(unsigned count=size;count>0;count--){
			*((char*)buffer++) = input_getc();
		}
		return size;
	}
	else return -1;
}

int write(int fd, const void *buffer, unsigned size){
	if(fd == 1){ /* console write */
		putbuf(buffer, size);
		return size;
	}else if(fd > 2){ /* file write */
		struct thread *t = thread_current();
		if(t->fd[fd] != NULL)
			return file_write(t->fd[fd], buffer, size);
		else
			return -1;
	}
	else return -1;
}

void seek(int fd, unsigned position){
	struct thread *t = thread_current();
	file_seek(t->fd[fd], position);
}

unsigned tell(int fd){
	struct thread *t = thread_current();
	return file_tell(t->fd[fd]);
}
